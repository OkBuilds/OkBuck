import re


def base_name(file_name):
    parts = file_name.split('__')
    return '{}__{}'.format(parts[0], parts[1])


def trimmed_version_name(file_name):
    parts = file_name.split('__')
    extension = parts[-1].split('.')[-1]
    return '{}__{}.{}'.format(parts[0], parts[1], extension)


jars = {}
aars = {}
sources = {}


for jar in glob(['*.jar']):
  b_name = base_name(jar)
  if jar.endswith('-sources.jar'):
    sources[b_name] = jar
  else:
    jars[b_name] = jar


for aar in glob(['*.aar']):
  b_name = base_name(aar)
  aars[b_name] = aar


for b_name, jar in jars.iteritems():
  jar_name = trimmed_version_name(jar)
  if sources.get(b_name):
    prebuilt_jar(
      name = jar_name,
      binary_jar = jar,
      source_jar = sources[b_name],
      visibility = ['PUBLIC'],
    )
  else:
    prebuilt_jar(
      name = jar_name,
      binary_jar = jar,
      visibility = ['PUBLIC'],
    )


for b_name, aar in aars.iteritems():
  aar_name = trimmed_version_name(aar)
  if sources.get(b_name):
    android_prebuilt_aar(
      name = aar_name,
      aar = aar,
      source_jar = sources[b_name],
      visibility = ['PUBLIC'],
    )
  else:
    android_prebuilt_aar(
      name = aar_name,
      aar = aar,
      visibility = ['PUBLIC'],
    )
