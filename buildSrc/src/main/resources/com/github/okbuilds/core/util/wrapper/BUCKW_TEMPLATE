#!/usr/bin/env bash

#########################################################################
##
##  Buck wrapper script to invoke okbuck when needed, before running buck
##
##  Created by OkBuck Gradle Plugin on : template-creation-time
##
#########################################################################

WORKING_DIR=$(pwd)

red=`tput setab 1 2>/dev/null || true`
yellow=`tput setab 3 2>/dev/null || true`
green=`tput setab 2 2>/dev/null || true`
blue=`tput setab 4 2>/dev/null || true`
reset=`tput sgr0 2>/dev/null || true`
bold=`tput bold 2>/dev/null || true`

die ( ) {
    echo
    echo "${bold}${red} $* ${reset}"
    echo
    exit 1
}

info ( ) {
    echo "${bold}${blue} $* ${reset}"
}

warn ( ) {
    echo "${bold}${yellow} $* ${reset}"
}

success ( ) {
    echo
    echo "${bold}${green} $* ${reset}"
    echo
}

ensure ( ) {
    command -v $1 >/dev/null 2>&1 || die "ERROR: '$1' could be found in your PATH. Please install $1. $2"
}

md5digest ( ) {
    # only md5 is available by default on osx, while md5sum is available on other *nix systems
    ( ensure md5sum && md5sum $1 ) || ( ensure md5 && md5 $1 )
}

jsonq() {
    python -c "import sys,json; obj=json.load(sys.stdin); print($1)"
}

DEFAULT_BUCK_REPO="https://github.com/facebook/buck.git"
DEFAULT_BUCK_INSTALL_DIR="$HOME/.gradle/caches/okbuilds/buck"
CUSTOM_BUCK_REPO="template-custom-buck-repo"
OKBUCK_FAILURE="$WORKING_DIR/build/okbuck.fail"
MAX_DISPLAY_CHANGES=10

getToClean ( ) {
    watchman --output-encoding=json -j 2>&1 <<-EOT
["query", "$WORKING_DIR", {
    "expression": ["allof",
        ["type", "f"],
        ["anyof",
template-remove
        ],
        ["not",
template-keep
        ]
    ],
    "fields": ["name"]
}]
EOT
}

getChanges ( ) {
    WATCHED_CHANGES=`watchman --output-encoding=json -j 2>&1 <<-EOT
["query", "$WORKING_DIR", {
    "since": "n:okbuck_trig",
    "expression": ["allof",
        ["type", "f"],
        ["anyof",
            ["imatch", "**/*.gradle", "wholename"],
            ["imatch", "**/src/**/AndroidManifest.xml", "wholename"]
        ]
    ],
    "fields": ["name"]
}]
EOT`
    RESOURCE_ROOTS=`watchman --output-encoding=json -j 2>&1 <<-EOT
["query", ".", {
    "since": "n:okbuck_resource_roots",
    "expression": ["allof",
        ["type", "d"],
        ["imatch", "**/src/**/res", "wholename"]
    ],
    "fields": ["new", "exists", "name"]
}]
EOT`
}

runOkBuck ( ) {
    info "RUNNING OKBUCK..."
    echo

    OKBUCK_FAILURE_DIR=`dirname $OKBUCK_FAILURE`
    mkdir -p $OKBUCK_FAILURE_DIR
    touch $OKBUCK_FAILURE

    if [ -z "$NO_BUCKD" ]; then
        getToClean | jsonq '"\n".join(obj["files"])' | xargs rm
        info "DELETED OLD BUCK FILES"
        EXTRA_ARGS="-xokbuckClean"
    fi

    ( $WORKING_DIR/gradlew -p $WORKING_DIR okbuck $EXTRA_ARGS --stacktrace && rm -f $OKBUCK_FAILURE && success "PROCEEDING WITH BUCK" ) || die "OKBUCK FAILED"
}

# Run tasks before buck command
setupBuckRun ( ) {
    if [ -z "$NO_BUCKD" ]; then
        # Get list of changed files since last time by querying watchman
        getChanges

        if [[ $WATCHED_CHANGES == *'"error":"unable to resolve root'* ]]; then
            # Watch project
            info "WATCHING PROJECT '$WORKING_DIR' FOR CHANGES..."
            echo
            watchman watch-project $WORKING_DIR >/dev/null 2>&1
            getChanges
        fi

        # Format list for simpler output
        CHANGES=$(echo $WATCHED_CHANGES | jsonq '" ".join(obj["files"])')
        NEW_OR_DELETED_RESOURCE_ROOTS=$(echo $RESOURCE_ROOTS | jsonq '" ".join([f["name"] for f in obj["files"] if (not f["exists"] or f["new"])])')
        NUM_CHANGES=$(echo $CHANGES $NEW_OR_DELETED_RESOURCE_ROOTS | wc -w)

        if [[ $NUM_CHANGES -gt 0 ]]; then
            info "CHANGES DETECTED IN:"
            echo $CHANGES $NEW_OR_DELETED_RESOURCE_ROOTS | tr ' ' '\n' | head -n $MAX_DISPLAY_CHANGES
            if [[ $NUM_CHANGES -gt $MAX_DISPLAY_CHANGES ]]; then
                DIFF=`expr $NUM_CHANGES - $MAX_DISPLAY_CHANGES`
                echo "...and $DIFF more"
            fi
            echo
            runOkBuck
        # If a previous okbuck run failed
        elif [ -f "$OKBUCK_FAILURE" ]; then
            warn "FAILED TO RUN OKBUCK PREVIOUSLY"
            runOkBuck
        fi
    else
        runOkBuck
    fi

    # If no explicit buck binary is set
    if [ -z "$BUCK_BINARY" ] ; then
        # If no buck installation directory is set
        if [ -z "$BUCK_HOME" ]; then
            BUCK_HOME=$DEFAULT_BUCK_INSTALL_DIR
        fi

        # Install buck from source if not already available
        if [ ! -d "$BUCK_HOME" ]; then
            warn "BUCK NOT FOUND IN '$BUCK_HOME'. INSTALLING BUCK..."
            git clone $DEFAULT_BUCK_REPO $BUCK_HOME
        fi

        # Add custom buck remote
        if [ ! -z $CUSTOM_BUCK_REPO ]; then
            REMOTE_NAME=$(printf '%s' $CUSTOM_BUCK_REPO | md5digest | cut -d ' ' -f 1)
            cd $BUCK_HOME
            REMOTE_EXISTS=$(git remote -v | grep $REMOTE_NAME)
            if [ -z "$REMOTE_EXISTS" ]; then
                git remote add $REMOTE_NAME $CUSTOM_BUCK_REPO
            fi
            cd $WORKING_DIR
        fi

        BUCK_BINARY="$BUCK_HOME/bin/buck"
    fi
}

ensure python 'https://www.python.org'
ensure ant 'http://ant.apache.org/'
if [ -z "$NO_BUCKD" ]; then
    ensure watchman 'https://facebook.github.io/watchman'
else
    warn "NOT USING WATCHMAN SINCE NO_BUCKD IS SET"
fi

setupBuckRun

# Invoke buck binary with arguments
exec "$BUCK_BINARY" "$@"
