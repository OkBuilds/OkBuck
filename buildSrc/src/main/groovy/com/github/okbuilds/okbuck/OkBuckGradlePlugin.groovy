package com.github.okbuilds.okbuck

import com.github.okbuilds.core.dependency.DependencyCache
import com.github.okbuilds.core.task.OkBuildCleanTask
import com.github.okbuilds.core.util.RobolectricUtil
import com.github.okbuilds.okbuck.config.BUCKFile
import com.github.okbuilds.okbuck.generator.BuckFileGenerator
import com.github.okbuilds.okbuck.generator.DotBuckConfigLocalGenerator
import com.github.okbuilds.okbuck.wrapper.WrapperExtension
import com.github.okbuilds.okbuck.wrapper.BuckWrapperTask
import org.apache.commons.io.IOUtils
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.Task
import org.gradle.api.logging.Logger

class OkBuckGradlePlugin implements Plugin<Project> {

    static final String OKBUCK = "okbuck"
    static final String OKBUCK_CLEAN = 'okbuckClean'
    static final String BUCK = "BUCK"
    static final String EXPERIMENTAL = "experimental"
    static final String WRAPPER = "wrapper"
    static final String BUCK_WRAPPER = "buckWrapper"
    static final String DEFAULT_CACHE_PATH = ".okbuck/cache"

    static final String GROUP = "okbuck"

    static DependencyCache depCache
    static Logger LOGGER

    void apply(Project project) {
        LOGGER = project.logger
        OkBuckExtension okbuck = project.extensions.create(OKBUCK, OkBuckExtension, project)
        WrapperExtension wrapper = okbuck.extensions.create(WRAPPER, WrapperExtension)
        okbuck.extensions.create(EXPERIMENTAL, ExperimentalExtension)

        Task okBuckClean = project.tasks.create(OKBUCK_CLEAN, OkBuildCleanTask)
        okBuckClean.setGroup(GROUP)
        okBuckClean.setDescription("Delete configuration files generated by OkBuck")

        Task okBuck = project.task(OKBUCK)
        okBuck.setGroup(GROUP)
        okBuck.setDescription("Generate BUCK files")

        okBuck.outputs.upToDateWhen { false }
        okBuck.dependsOn(okBuckClean)
        okBuck << {
            generate(project)
        }

        project.afterEvaluate {
            ExperimentalExtension experimental = okbuck.experimental

            depCache = new DependencyCache(project, DEFAULT_CACHE_PATH, true, true, experimental.sources)

            if (experimental.robolectric) {
                Task fetchRobolectricRuntimeDeps = project.task('fetchRobolectricRuntimeDeps')
                okBuck.dependsOn(fetchRobolectricRuntimeDeps)
                fetchRobolectricRuntimeDeps.mustRunAfter(okBuckClean)
                fetchRobolectricRuntimeDeps.setDescription("Fetches runtime dependencies for robolectric")

                fetchRobolectricRuntimeDeps << {
                    RobolectricUtil.download(project)
                }
            }

            BuckWrapperTask buckWrapper = project.tasks.create(BUCK_WRAPPER, BuckWrapperTask, {
                repo = wrapper.repo
                remove = wrapper.remove
                keep = wrapper.keep
            })
            buckWrapper.setGroup(GROUP)
            buckWrapper.setDescription("Create buck wrapper")
        }
    }

    private static generate(Project project) {
        OkBuckExtension okbuck = project.okbuck

        // generate empty .buckconfig if it does not exist
        File dotBuckConfig = project.file(".buckconfig")
        if (!dotBuckConfig.exists()) {
            dotBuckConfig.createNewFile()
        }

        // generate .buckconfig.local
        File dotBuckConfigLocal = project.file(".buckconfig.local")
        PrintStream configPrinter = new PrintStream(dotBuckConfigLocal)
        DotBuckConfigLocalGenerator.generate(okbuck).print(configPrinter)
        IOUtils.closeQuietly(configPrinter)

        // generate BUCK file for each project
        Map<Project, BUCKFile> buckFiles = new BuckFileGenerator(project).generate()

        buckFiles.each { Project subProject, BUCKFile buckFile ->
            PrintStream buckPrinter = new PrintStream(subProject.file(BUCK))
            buckFile.print(buckPrinter)
            IOUtils.closeQuietly(buckPrinter)
        }
    }
}
